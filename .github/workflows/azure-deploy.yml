name: Build and Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

env:
  REGISTRY: 'therickybobbehArc.azurecr.io'  # Your Azure Container Registry name
  WEB_IMAGE_NAME: 'portfolio-frontend'      # Image name for Next.js frontend
  API_IMAGE_NAME: 'portfolio-backend'       # Image name for FastAPI backend
  WEB_APP_NAME: 'portfolio-web'             # Azure App Service name for frontend
  API_APP_NAME: 'portfolio-api'             # Azure App Service name for backend

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Azure login using proper service principal credentials
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Get ACR access credentials
      - name: Get ACR credentials
        id: get-acr-credentials
        run: |
          ACR_USERNAME=$(az acr credential show -n therickybobbehArc --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show -n therickybobbehArc --query "passwords[0].value" -o tsv)
          echo "::add-mask::$ACR_PASSWORD"
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      # Log in to ACR 
      - name: Log in to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ steps.get-acr-credentials.outputs.username }}
          password: ${{ steps.get-acr-credentials.outputs.password }}

      # Build and push frontend image
      - name: Build and push frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }},${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:latest
          cache-to: type=inline
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}
  
  # Use a separate job for deployment that depends on the build job
  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      - name: Azure Login for Deployment
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      # Build and push backend image
      - name: Build and push backend image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }},${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:latest
          cache-to: type=inline
          build-args: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}

      # Deploy frontend to Azure Web App
      - name: Deploy frontend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEB_APP_NAME }}
          images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}:${{ github.sha }}

      # Deploy backend to Azure Web App
      - name: Deploy backend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.API_APP_NAME }}
          images: ${{ env.REGISTRY }}/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
