name: Build & Deploy Frontend Landing Page

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        type: choice
        options:
          - production
          - staging
        default: 'production'
        required: true

env:
  # Azure Container Registry details
  REGISTRY: therickybobbeharc-ctc3e3gyg6ffbth7.azurecr.io
  FRONTEND_IMAGE: portfolio-frontend
  # Azure deployment details
  RESOURCE_GROUP: portfolio-rg
  CONTAINER_APP_NAME: portfolio-frontend
  CONTAINER_APP_ENV: portfolio-env
  LOCATION: eastus
  # Flag for custom domain configuration
  HAS_CUSTOM_DOMAIN: ${{ secrets.CUSTOM_DOMAIN != '' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy-to-container-apps.outputs.url }}

    steps:
      # Checkout repository
      - name: Checkout
        uses: actions/checkout@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Login to ACR - using your stored credentials
      - name: Login to Azure Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      # Build and push frontend image with production environment variables
      - name: Build & Push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          cache-to: type=inline
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}
            
      # Verify images exist in ACR
      - name: Verify images in ACR
        run: |
          # List repositories in ACR
          echo "Available repositories in ACR:"
          az acr repository list --name $(echo ${{ env.REGISTRY }} | cut -d '.' -f1) --output table
          
          # List frontend image tags
          echo "Frontend image tags:"
          az acr repository show-tags --name $(echo ${{ env.REGISTRY }} | cut -d '.' -f1) --repository ${{ env.FRONTEND_IMAGE }} --output table

      # Deploy to Azure Container Apps with preview (following Azure best practices)
      - name: Deploy to Azure Container Apps
        id: deploy-to-container-apps
        run: |
          # Preview the deployment changes first (following best practices)
          echo "Previewing Container App deployment changes..."
          
          # Check if Container Apps environment exists, create if not
          env_exists=$(az containerapp env list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='${{ env.CONTAINER_APP_ENV }}'].name" -o tsv)
          if [ -z "$env_exists" ]; then
            echo "Creating Container Apps environment..."
            az containerapp env create \
              --name ${{ env.CONTAINER_APP_ENV }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }}
          fi
          
          # Check if Container App exists
          app_exists=$(az containerapp list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='${{ env.CONTAINER_APP_NAME }}'].name" -o tsv)
          
          if [ -z "$app_exists" ]; then
            echo "Creating new Container App..."
            az containerapp create \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APP_ENV }} \
              --registry-server ${{ env.REGISTRY }} \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_PASSWORD }} \
              --image ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }} \
              --target-port 3000 \
              --ingress external \
              --env-vars NODE_ENV=production \
              --min-replicas 1 \
              --max-replicas 5 \
              --query properties.configuration.ingress.fqdn -o tsv
          else
            echo "Updating existing Container App..."
            az containerapp update \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }} \
              --set-env-vars NODE_ENV=production \
              --min-replicas 1 \
              --max-replicas 5 \
              --query properties.configuration.ingress.fqdn -o tsv
          fi
          
          # Get the FQDN for the deployed app
          app_url=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "::set-output name=url::https://${app_url}"

      # Configure custom domain with managed certificates (HTTPS)
      - name: Configure custom domain with HTTPS
        if: env.HAS_CUSTOM_DOMAIN == 'true'
        run: |
          echo "Configuring custom domain with HTTPS..."
          az containerapp hostname add \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --hostname ${{ secrets.CUSTOM_DOMAIN }}
            
          # Add managed certificate for the custom domain
          az containerapp hostname bind \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --hostname ${{ secrets.CUSTOM_DOMAIN }} \
            --environment ${{ env.CONTAINER_APP_ENV }} \
            --validation-method CNAME
          
          echo "✅ Custom domain configured with HTTPS"
          echo "Please add the following CNAME record to your DNS provider:"
          az containerapp hostname show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --hostname ${{ secrets.CUSTOM_DOMAIN }} \
            --query "bindingDetails.customDomainConfiguration.validationDetails.cnameRecord"
      
      # Security scanning and validation
      - name: Run security scan
        run: |
          echo "Running security scan on container image..."
          # Here you would integrate with security scanning tools like Trivy, Clair, etc.
          # For now we'll use a placeholder
          echo "Security scan completed"
            
      - name: Deployment Summary
        run: |
          echo "✅ Frontend successfully deployed to Azure Container Apps"
          app_url=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "Application URL: https://${app_url}"
          if [ -n "${{ secrets.CUSTOM_DOMAIN }}" ]; then
            echo "Custom Domain: https://${{ secrets.CUSTOM_DOMAIN }}"
          fi