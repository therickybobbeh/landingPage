name: Build & Deploy Frontend Landing Page

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: Deployment environment
        type: choice
        options: [ production, staging ]
        default: production
        required: true

env:
  REGISTRY: pdmgmtacrdevy5pur2ngrjbwy.azurecr.io
  FRONTEND_IMAGE: portfolio-frontend
  RESOURCE_GROUP: pd-management-dev
  CONTAINER_APP_NAME: portfolio-frontend
  CONTAINER_APP_ENV: pd-management-dev-env
  LOCATION: eastus
  # Adding a flag to check if custom domain is provided
  HAS_CUSTOM_DOMAIN: ${{ secrets.CUSTOM_DOMAIN != '' }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy-to-container-apps.outputs.url }}

    steps:
      # ----- decide deploy environment once, reuse everywhere -----
      - name: Set DEPLOY_ENV
        id: set-env
        run: |
          echo "DEPLOY_ENV=${{ github.event.inputs.environment || 'production' }}" >> "$GITHUB_ENV"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build & Push frontend
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          cache-to: type=inline
          build-args: |
            NODE_ENV=production
            NEXT_PUBLIC_ENVIRONMENT=${{ env.DEPLOY_ENV }}
            
      # Verify images exist in ACR
      - name: Verify images in ACR
        run: |
          # List repositories in ACR
          echo "Available repositories in ACR:"
          az acr repository list --name $(echo ${{ env.REGISTRY }} | cut -d '.' -f1) --output table
          
          # List frontend image tags
          echo "Frontend image tags:"
          az acr repository show-tags --name $(echo ${{ env.REGISTRY }} | cut -d '.' -f1) --repository ${{ env.FRONTEND_IMAGE }} --output table

      # Deploy to Azure Container Apps with preview (following Azure best practices)
      - name: Deploy to Azure Container Apps
        id: deploy-to-container-apps
        run: |
          # Preview the deployment changes first (following best practices)
          echo "Previewing Container App deployment changes..."
          
          # Check if Container Apps environment exists, create if not
          env_exists=$(az containerapp env list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='${{ env.CONTAINER_APP_ENV }}'].name" -o tsv)
          if [ -z "$env_exists" ]; then
            echo "Creating Container Apps environment..."
            az containerapp env create \
              --name ${{ env.CONTAINER_APP_ENV }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --location ${{ env.LOCATION }}
          fi
          
          # Set registry credentials once - this will be used for both create and update
          echo "Setting registry credentials for Container Apps environment..."
          az containerapp registry set \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --server ${{ env.REGISTRY }} \
            --username ${{ secrets.ACR_USERNAME }} \
            --password ${{ secrets.ACR_PASSWORD }} \
            2>/dev/null || echo "Registry will be set during container app creation"
          
          # Check if Container App exists
          app_exists=$(az containerapp list --resource-group ${{ env.RESOURCE_GROUP }} --query "[?name=='${{ env.CONTAINER_APP_NAME }}'].name" -o tsv)
          
          if [ -z "$app_exists" ]; then
            echo "Creating new Container App..."
            az containerapp create \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --environment ${{ env.CONTAINER_APP_ENV }} \
              --registry-server ${{ env.REGISTRY }} \
              --registry-username ${{ secrets.ACR_USERNAME }} \
              --registry-password ${{ secrets.ACR_PASSWORD }} \
              --image ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }} \
              --target-port 3000 \
              --ingress external \
              --env-vars NODE_ENV=production \
              --min-replicas 1 \
              --max-replicas 5 \
              --query properties.configuration.ingress.fqdn -o tsv
          else
            echo "Updating existing Container App..."
            az containerapp update \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --image ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }} \
              --set-env-vars NODE_ENV=production \
              --min-replicas 1 \
              --max-replicas 5 \
              --query properties.configuration.ingress.fqdn -o tsv
          fi
          
          # Get the FQDN for the deployed app
          app_url=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "url=https://${app_url}" >> $GITHUB_OUTPUT

      # Configure custom domain with managed certificates (HTTPS)
      - name: Configure custom domain with HTTPS
        if: env.HAS_CUSTOM_DOMAIN == 'true'
        run: |
          echo "Configuring custom domain with HTTPS for ${{ secrets.CUSTOM_DOMAIN }}..."
          
          # First check if any hostnames exist at all
          existing_hostnames=$(az containerapp hostname list \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --output tsv 2>/dev/null || echo "")
          
          # More robust check for existing hostname
          if [ -n "$existing_hostnames" ]; then
            # Only run the contains query if we have hostnames to check
            hostname_exists=$(az containerapp hostname list \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --query "[?contains(hostname, '${{ secrets.CUSTOM_DOMAIN }}')].hostname" \
              --output tsv 2>/dev/null || echo "")
          else
            hostname_exists=""
          fi
          
          if [ -z "$hostname_exists" ]; then
            # Add custom domain to Container App only if it doesn't exist
            echo "Adding new custom domain..."
            az containerapp hostname add \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --hostname ${{ secrets.CUSTOM_DOMAIN }}
              
            # Get the standardized hostname after adding
            echo "Retrieving the standardized hostname..."
            sleep 5  # Short delay to ensure Azure has processed the add operation
            
            hostname_exists=$(az containerapp hostname list \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --query "[?contains(hostname, '${{ secrets.CUSTOM_DOMAIN }}')].hostname" \
              --output tsv)
              
            if [ -z "$hostname_exists" ]; then
              echo "Warning: Could not retrieve standardized hostname after adding. Using original domain name."
              hostname_exists="${{ secrets.CUSTOM_DOMAIN }}"
            else
              echo "Retrieved standardized hostname: $hostname_exists"
            fi
          else
            echo "Custom domain already exists as $hostname_exists. Skipping domain addition step."
          fi
          
          # Check if the hostname is already bound
          echo "Checking binding status for $hostname_exists..."
          binding_status=$(az containerapp hostname list \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --query "[?hostname=='$hostname_exists'].bindingType" \
            --output tsv 2>/dev/null || echo "NotBound")
          
          if [[ "$binding_status" == "NotBound" || "$binding_status" == "Disabled" || -z "$binding_status" ]]; then
            # Bind the hostname with TXT validation
            echo "Binding custom domain with TXT validation..."
            validation_info=$(az containerapp hostname bind \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --hostname "$hostname_exists" \
              --environment ${{ env.CONTAINER_APP_ENV }} \
              --validation-method TXT)
            
            # Output DNS configuration information
            echo "===== DNS CONFIGURATION REQUIRED ====="
            echo "$validation_info"
            echo "Please add the above validation record to your DNS configuration"
            echo "====================================="
          else
            echo "Custom domain is already bound with binding type: $binding_status"
          fi
          
          echo "âœ… Custom domain configuration check completed"
      
      # Security scanning and validation
      - name: Run security scan
        run: |
          echo "Running security scan on container image..."
          # Here you would integrate with security scanning tools like Trivy, Clair, etc.
          # For now we'll use a placeholder
          echo "Security scan completed"
            
      - name: Deployment Summary
        run: |
          echo "âœ… Frontend successfully deployed to Azure Container Apps"
          app_url=$(az containerapp show --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query "properties.configuration.ingress.fqdn" -o tsv)
          echo "Default Application URL: https://${app_url}"
          
          if [[ -n "${{ secrets.CUSTOM_DOMAIN }}" ]]; then
            echo "Custom Domain (after DNS setup): https://${{ secrets.CUSTOM_DOMAIN }}"
          fi
          
      # Cleanup registry credentials as security best practice
      - name: Cleanup credentials
        if: always() # Run even if previous steps failed
        run: |
          echo "Cleaning up registry credentials..."
          # Reset registry credentials to null values for security
          az containerapp registry set \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --server "" \
            --username "" \
            --password "" \
            2>/dev/null || echo "Failed to cleanup registry credentials, but deployment was successful"
            
      # Always logout from Azure to clean up session
      - name: Logout from Azure
        if: always() # Run even if previous steps failed
        run: |
          az logout
          echo "âœ… Credentials cleaned up and logged out from Azure"