name: Build and Deploy to Azure

on:
  push:
    branches:
      - main
  workflow_dispatch:  # For manual triggers

env:
  REGISTRY: 'therickybobbehArc.azurecr.io'  # Your ACR name
  FRONTEND_IMAGE: 'portfolio-frontend'
  BACKEND_IMAGE: 'portfolio-backend'
  FRONTEND_APP_NAME: 'development-profile'   # Your Azure Web App name for frontend
  BACKEND_APP_NAME: 'portfolio-api'          # Your Azure Web App name for backend

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Get repository name (used for image naming by docker-compose)
      - name: Get repository name
        id: repo-name
        run: |
          REPO_NAME=$(basename $GITHUB_WORKSPACE)
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "Repository name: $REPO_NAME"

      # Azure login using the correct format for service principal
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: false
          environment: azurecloud
          allow-no-subscriptions: false
          audience: api://AzureADTokenExchange
          auth-type: SERVICE_PRINCIPAL

      # Get ACR credentials dynamically
      - name: Get ACR credentials
        id: acr-creds
        run: |
          ACR_USERNAME=$(az acr credential show -n therickybobbehArc --query "username" -o tsv)
          ACR_PASSWORD=$(az acr credential show -n therickybobbehArc --query "passwords[0].value" -o tsv)
          echo "::add-mask::$ACR_PASSWORD"
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      # Log in to Azure Container Registry with dynamic credentials
      - name: ACR login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY }}
          username: ${{ steps.acr-creds.outputs.username }}
          password: ${{ steps.acr-creds.outputs.password }}

      # Build and push frontend image directly from docker-compose services
      - name: Build and push frontend image
        run: |
          docker compose build web
          # Use the correct image name based on the repository name
          docker tag ${{ steps.repo-name.outputs.repo_name }}:latest ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          docker tag ${{ steps.repo-name.outputs.repo_name }}:latest ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:latest

      # Build and push backend image directly from docker-compose services
      - name: Build and push backend image
        run: |
          docker compose build api
          # Use the correct image name based on the repository name
          docker tag ${{ steps.repo-name.outputs.repo_name }}_api:latest ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          docker tag ${{ steps.repo-name.outputs.repo_name }}_api:latest ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:latest

      # Deploy frontend to Azure Web App
      - name: Deploy frontend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.FRONTEND_APP_NAME }}
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}

      # Deploy backend to Azure Web App (if needed)
      - name: Deploy backend to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.BACKEND_APP_NAME }}
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}