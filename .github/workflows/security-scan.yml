name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Security Vulnerability Scan
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: |
            frontend/package-lock.json
            api/package-lock.json
            
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          
      - name: Install API dependencies
        run: |
          cd api
          npm ci --package-lock-only || true
          npm ci
          
      - name: Frontend Security Audit
        run: |
          cd frontend
          npm audit --audit-level=moderate --json > ../frontend-audit.json || true
          
      - name: API Security Audit
        run: |
          cd api
          npm audit --audit-level=moderate --json > ../api-audit.json || true
          
      - name: Install Python Security Tools
        run: |
          pip install semgrep bandit safety
          
      - name: Run Semgrep Security Analysis
        run: |
          semgrep --config=auto --json --output=semgrep-results.json . || true
          
      - name: Run Custom Security Scanner
        run: |
          python3 security-scan.py > security-scan-output.txt
          
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            frontend-audit.json
            api-audit.json
            semgrep-results.json
            security-report.json
            security-report.md
            security-scan-output.txt
            COMPREHENSIVE-SECURITY-REPORT.md
            
      - name: Comment PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const securityReport = fs.readFileSync('security-report.json', 'utf8');
              const report = JSON.parse(securityReport);
              
              const comment = `## üõ°Ô∏è Security Scan Results
              
              **Security Score:** ${report.security_score}/100
              **Vulnerabilities:** ${report.vulnerabilities.length}
              **Warnings:** ${report.warnings.length}
              **Security Features:** ${report.info.length}
              
              ${report.vulnerabilities.length > 0 ? '‚ö†Ô∏è **Critical vulnerabilities found!** Please review the detailed security report.' : '‚úÖ No critical vulnerabilities detected.'}
              
              üìÑ Detailed reports are available in the workflow artifacts.`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not create security comment:', error);
            }
            
      - name: Fail on Critical Vulnerabilities
        run: |
          python3 -c "
          import json
          try:
              with open('frontend-audit.json', 'r') as f:
                  audit = json.load(f)
                  metadata = audit.get('metadata', {})
                  vulnerabilities = metadata.get('vulnerabilities', {})
                  critical = vulnerabilities.get('critical', 0)
                  high = vulnerabilities.get('high', 0)
                  
                  if critical > 0:
                      print(f'‚ùå {critical} critical vulnerabilities found!')
                      exit(1)
                  elif high > 5:  # Fail if more than 5 high severity issues
                      print(f'‚ùå Too many high severity vulnerabilities: {high}')
                      exit(1)
                  else:
                      print(f'‚úÖ Vulnerability levels acceptable (Critical: {critical}, High: {high})')
          except FileNotFoundError:
              print('‚ÑπÔ∏è No audit file found, skipping vulnerability check')
          except Exception as e:
              print(f'‚ö†Ô∏è Error checking vulnerabilities: {e}')
          "